{"ast":null,"code":"import _slicedToArray from \"/Users/priyankamaheshwari/Desktop/reactjs-multi-lang/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/priyankamaheshwari/Desktop/reactjs-multi-lang/src/pages/Homepage.js\";\nimport React, { useEffect, useState } from 'react';\nimport { client } from '../prismic-config';\n\nconst Homepage = () => {\n  const _useState = useState({\n    Homepage: null\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        prismicData = _useState2[0],\n        setPrismicData = _useState2[1]; // Get the homepage documents from Prismic\n\n\n  useEffect(() => {\n    const fetchPrismicData = async () => {\n      try {\n        const homeDoc = await client.getSingle('homepage');\n\n        if (homeDoc) {\n          console.log(homeDoc);\n          setPrismicData({\n            Homepage: homeDoc.results.data\n          });\n        } else {\n          console.warn('Blog Home document was not found. Make sure it exists in your Prismic repository');\n          toggleNotFound(true);\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    fetchPrismicData();\n  }, []); // Return the page if a document was retrieved from Prismic\n\n  if (prismicData.homepage) {\n    const homepage = prismicData.homepage;\n    return React.createElement(Header, {\n      image: homeDoc.data.image,\n      headline: homeDoc.data.headline,\n      description: homeDoc.data.description,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    });\n  } else if (notFound) {\n    return React.createElement(NotFound, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    });\n  }\n\n  return null;\n};\n\nexport default Homepage;","map":{"version":3,"sources":["/Users/priyankamaheshwari/Desktop/reactjs-multi-lang/src/pages/Homepage.js"],"names":["React","useEffect","useState","client","Homepage","prismicData","setPrismicData","fetchPrismicData","homeDoc","getSingle","console","log","results","data","warn","toggleNotFound","error","homepage","image","headline","description","notFound"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,MAAT,QAAuB,mBAAvB;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA,oBACmBF,QAAQ,CAAC;AAAEE,IAAAA,QAAQ,EAAE;AAAZ,GAAD,CAD3B;AAAA;AAAA,QACZC,WADY;AAAA,QACCC,cADD,kBAGnB;;;AACAL,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMM,gBAAgB,GAAG,YAAY;AACnC,UAAI;AACF,cAAMC,OAAO,GAAG,MAAML,MAAM,CAACM,SAAP,CAAiB,UAAjB,CAAtB;;AACA,YAAID,OAAJ,EAAa;AACXE,UAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ;AACAF,UAAAA,cAAc,CAAC;AAAEF,YAAAA,QAAQ,EAAEI,OAAO,CAACI,OAAR,CAAgBC;AAA5B,WAAD,CAAd;AACD,SAHD,MAGO;AACLH,UAAAA,OAAO,CAACI,IAAR,CAAa,kFAAb;AACAC,UAAAA,cAAc,CAAC,IAAD,CAAd;AACD;AACF,OATD,CASE,OAAOC,KAAP,EAAc;AACdN,QAAAA,OAAO,CAACM,KAAR,CAAcA,KAAd;AACD;AACF,KAbD;;AAeAT,IAAAA,gBAAgB;AACjB,GAjBQ,EAiBN,EAjBM,CAAT,CAJmB,CAuBnB;;AACA,MAAIF,WAAW,CAACY,QAAhB,EAA0B;AACxB,UAAMA,QAAQ,GAAGZ,WAAW,CAACY,QAA7B;AAEA,WACI,oBAAC,MAAD;AACE,MAAA,KAAK,EAAET,OAAO,CAACK,IAAR,CAAaK,KADtB;AAEE,MAAA,QAAQ,EAAEV,OAAO,CAACK,IAAR,CAAaM,QAFzB;AAGE,MAAA,WAAW,EAAEX,OAAO,CAACK,IAAR,CAAaO,WAH5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAOD,GAVD,MAUO,IAAIC,QAAJ,EAAc;AACnB,WAAO,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AACD,SAAO,IAAP;AACD,CAtCH;;AAwCE,eAAejB,QAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { client } from '../prismic-config';\n\nconst Homepage = () => {\n    const [prismicData, setPrismicData] = useState({ Homepage: null });\n  \n    // Get the homepage documents from Prismic\n    useEffect(() => {\n      const fetchPrismicData = async () => {\n        try {\n          const homeDoc = await client.getSingle('homepage');\n          if (homeDoc) {\n            console.log(homeDoc)\n            setPrismicData({ Homepage: homeDoc.results.data});\n          } else {\n            console.warn('Blog Home document was not found. Make sure it exists in your Prismic repository');\n            toggleNotFound(true);\n          }\n        } catch (error) {\n          console.error(error);\n        }\n      }\n  \n      fetchPrismicData();\n    }, []);\n  \n    // Return the page if a document was retrieved from Prismic\n    if (prismicData.homepage) {\n      const homepage = prismicData.homepage;\n  \n      return (\n          <Header\n            image={homeDoc.data.image}\n            headline={homeDoc.data.headline}\n            description={homeDoc.data.description}\n          />\n      );\n    } else if (notFound) {\n      return <NotFound />;\n    }\n    return null;\n  }\n  \n  export default Homepage;\n  "]},"metadata":{},"sourceType":"module"}
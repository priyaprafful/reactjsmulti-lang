{"ast":null,"code":"import _slicedToArray from \"/Users/priyankamaheshwari/Desktop/reactjs-multi-lang/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/priyankamaheshwari/Desktop/reactjs-multi-lang/src/components/layouts/MenuLinks.js\";\nimport React, { useEffect, useState } from 'react';\nimport { client, linkResolver } from '../../prismic-config';\nimport { RichText, Link } from 'prismic-reactjs';\n\nconst MenuLinks = ({}) => {\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        menuData = _useState2[0],\n        setMenuData = _useState2[1]; // Get the homepage documents from Prismic\n\n\n  useEffect(() => {\n    const fetchPrismicData = async () => {\n      try {\n        const menuDoc = await client.getSingle('menu');\n\n        if (menuDoc) {\n          setMenuData(menuDoc);\n        } else {\n          console.warn('Page document was not found. Make sure it exists in your Prismic repository');\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    fetchPrismicData();\n  }, []);\n\n  if (menuData) {\n    console.log(menuData.data.menu_links);\n    return React.createElement(\"nav\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, menuData.data.menu_links.map(item => React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: Link.url(item.link, linkResolver),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, RichText.asText(item.label))))));\n  } else {\n    return null;\n  }\n};\n\nexport default MenuLinks;","map":{"version":3,"sources":["/Users/priyankamaheshwari/Desktop/reactjs-multi-lang/src/components/layouts/MenuLinks.js"],"names":["React","useEffect","useState","client","linkResolver","RichText","Link","MenuLinks","menuData","setMenuData","fetchPrismicData","menuDoc","getSingle","console","warn","error","log","data","menu_links","map","item","url","link","asText","label"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,MAAT,EAAgBC,YAAhB,QAAoC,sBAApC;AACA,SAASC,QAAT,EAAoBC,IAApB,QAA+B,iBAA/B;;AAGA,MAAMC,SAAS,GAAG,CAAC,EAAD,KAAQ;AAAA,oBACQL,QAAQ,CAAC,IAAD,CADhB;AAAA;AAAA,QACjBM,QADiB;AAAA,QACPC,WADO,kBAIxB;;;AACAR,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMS,gBAAgB,GAAG,YAAY;AACnC,UAAI;AACF,cAAMC,OAAO,GAAG,MAAMR,MAAM,CAACS,SAAP,CAAiB,MAAjB,CAAtB;;AACA,YAAID,OAAJ,EAAa;AACXF,UAAAA,WAAW,CAACE,OAAD,CAAX;AACD,SAFD,MAEO;AACLE,UAAAA,OAAO,CAACC,IAAR,CAAa,6EAAb;AACD;AACA,OAPH,CAOI,OAAOC,KAAP,EAAc;AACdF,QAAAA,OAAO,CAACE,KAAR,CAAcA,KAAd;AACD;AACJ,KAXD;;AAaEL,IAAAA,gBAAgB;AACnB,GAfQ,EAeN,EAfM,CAAT;;AAiBA,MAAIF,QAAJ,EAAc;AACVK,IAAAA,OAAO,CAACG,GAAR,CAAYR,QAAQ,CAACS,IAAT,CAAcC,UAA1B;AACA,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKV,QAAQ,CAACS,IAAT,CAAcC,UAAd,CAAyBC,GAAzB,CAA6BC,IAAI,IAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI;AAAG,MAAA,IAAI,EAAEd,IAAI,CAACe,GAAL,CAASD,IAAI,CAACE,IAAd,EAAoBlB,YAApB,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA6CC,QAAQ,CAACkB,MAAT,CAAgBH,IAAI,CAACI,KAArB,CAA7C,CAAJ,CAAnC,CADL,CADA,CADJ;AAWH,GAbD,MAaO;AACH,WAAO,IAAP;AACH;AAEF,CAvCD;;AA0CA,eAAejB,SAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { client,linkResolver } from '../../prismic-config';\nimport { RichText , Link} from 'prismic-reactjs';\n\n\nconst MenuLinks = ({}) => {\n  const [menuData, setMenuData] = useState(null);\n  \n  \n  // Get the homepage documents from Prismic\n  useEffect(() => {\n    const fetchPrismicData = async () => {\n      try {\n        const menuDoc = await client.getSingle('menu');\n        if (menuDoc) {\n          setMenuData(menuDoc);\n        } else {\n          console.warn('Page document was not found. Make sure it exists in your Prismic repository');\n        }\n        } catch (error) {\n          console.error(error);\n        }\n    }\n  \n      fetchPrismicData();\n  }, []);\n\n  if (menuData) {\n      console.log(menuData.data.menu_links)\n      return ( \n          <nav>\n          <ul>\n              {menuData.data.menu_links.map(item=><li><a href={Link.url(item.link, linkResolver)}>{RichText.asText(item.label)}</a></li>)}\n          </ul>\n          </nav>\n        \n        \n        );\n    \n\n  } else {\n      return null;\n  }\n   \n}\n  \n  \nexport default MenuLinks;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _slicedToArray from \"/Users/priyankamaheshwari/Desktop/reactjs-multi-lang/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/priyankamaheshwari/Desktop/reactjs-multi-lang/src/components/layouts/MenuLinks.js\";\nimport React, { useEffect, useState } from 'react';\nimport { client, linkResolver } from '../../prismic-config';\nimport { RichText, Link } from 'prismic-reactjs';\n\nconst MenuLinks = ({\n  lang\n}) => {\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        menuData = _useState2[0],\n        setMenuData = _useState2[1]; // Get the homepage documents from Prismic\n\n\n  useEffect(() => {\n    const fetchPrismicData = async () => {\n      try {\n        const menuDoc = await client.getSingle('menu', {\n          lang\n        });\n\n        if (menuDoc) {\n          setMenuData(menuDoc);\n        } else {\n          console.warn('Page document was not found. Make sure it exists in your Prismic repository');\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    fetchPrismicData();\n  }, [lang]);\n\n  function createAltLink(altLang) {\n    return \"/\" + altLang + \"/\" + uid;\n  }\n\n  if (menuData) {\n    return React.createElement(\"nav\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, menuData.data.menu_links.map(item => React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: Link.url(item.link, linkResolver),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, RichText.asText(item.label)))), menuData.alternate_languages.map(altLang => React.createElement(\"li\", {\n      key: altLang.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      href: createAltLink(altLang.lang),\n      className: \"flag-icon flag-icon-\" + altLang.lang.slice(-2),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    })))));\n  } else {\n    return null;\n  }\n};\n\nexport default MenuLinks;","map":{"version":3,"sources":["/Users/priyankamaheshwari/Desktop/reactjs-multi-lang/src/components/layouts/MenuLinks.js"],"names":["React","useEffect","useState","client","linkResolver","RichText","Link","MenuLinks","lang","menuData","setMenuData","fetchPrismicData","menuDoc","getSingle","console","warn","error","createAltLink","altLang","uid","data","menu_links","map","item","url","link","asText","label","alternate_languages","id","slice"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,MAAT,EAAgBC,YAAhB,QAAoC,sBAApC;AACA,SAASC,QAAT,EAAoBC,IAApB,QAA+B,iBAA/B;;AAIA,MAAMC,SAAS,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAY;AAAA,oBACIN,QAAQ,CAAC,IAAD,CADZ;AAAA;AAAA,QACrBO,QADqB;AAAA,QACXC,WADW,kBAG5B;;;AACAT,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMU,gBAAgB,GAAG,YAAY;AACnC,UAAI;AACF,cAAMC,OAAO,GAAG,MAAMT,MAAM,CAACU,SAAP,CAAiB,MAAjB,EAAyB;AAACL,UAAAA;AAAD,SAAzB,CAAtB;;AACA,YAAII,OAAJ,EAAa;AACXF,UAAAA,WAAW,CAACE,OAAD,CAAX;AACD,SAFD,MAEO;AACLE,UAAAA,OAAO,CAACC,IAAR,CAAa,6EAAb;AACD;AACA,OAPH,CAOI,OAAOC,KAAP,EAAc;AACdF,QAAAA,OAAO,CAACE,KAAR,CAAcA,KAAd;AACD;AACJ,KAXD;;AAaEL,IAAAA,gBAAgB;AACnB,GAfQ,EAeN,CAACH,IAAD,CAfM,CAAT;;AAiBA,WAASS,aAAT,CAAuBC,OAAvB,EAA+B;AAC7B,WAAO,MAAIA,OAAJ,GAAY,GAAZ,GAAgBC,GAAvB;AACD;;AACD,MAAIV,QAAJ,EAAc;AACV,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGA,QAAQ,CAACW,IAAT,CAAcC,UAAd,CAAyBC,GAAzB,CAA8BC,IAAI,IACnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAG,MAAA,IAAI,EAAEjB,IAAI,CAACkB,GAAL,CAASD,IAAI,CAACE,IAAd,EAAoBrB,YAApB,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKC,QAAQ,CAACqB,MAAT,CAAgBH,IAAI,CAACI,KAArB,CADL,CADJ,CADC,CADH,EAQGlB,QAAQ,CAACmB,mBAAT,CAA6BN,GAA7B,CAAiCJ,OAAO,IACvC;AAAI,MAAA,GAAG,EAAEA,OAAO,CAACW,EAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAG,MAAA,IAAI,EAAIZ,aAAa,CAACC,OAAO,CAACV,IAAT,CAAxB;AAAwC,MAAA,SAAS,EAAE,yBAAyBU,OAAO,CAACV,IAAR,CAAasB,KAAb,CAAmB,CAAC,CAApB,CAA5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADD,CARH,CADA,CADJ;AA4BH,GA7BD,MA6BO;AACH,WAAO,IAAP;AACH;AAEF,CAzDD;;AA4DA,eAAevB,SAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { client,linkResolver } from '../../prismic-config';\nimport { RichText , Link} from 'prismic-reactjs';\n\n\n\nconst MenuLinks = ({lang}) => {\n  const [menuData, setMenuData] = useState(null);\n  \n  // Get the homepage documents from Prismic\n  useEffect(() => {\n    const fetchPrismicData = async () => {\n      try {\n        const menuDoc = await client.getSingle('menu', {lang});\n        if (menuDoc) {\n          setMenuData(menuDoc);\n        } else {\n          console.warn('Page document was not found. Make sure it exists in your Prismic repository');\n        }\n        } catch (error) {\n          console.error(error);\n        }\n    }\n  \n      fetchPrismicData();\n  }, [lang]);\n\n  function createAltLink(altLang){\n    return \"/\"+altLang+\"/\"+uid;\n  }\n  if (menuData) {\n      return ( \n          <nav>\n          <ul>\n            {menuData.data.menu_links.map (item =>\n            <li>\n                <a href={Link.url(item.link, linkResolver)}>\n                    {RichText.asText(item.label)}\n                </a>\n            </li>\n            )}\n            {menuData.alternate_languages.map(altLang=>\n              <li key={altLang.id}>\n                <a href = {createAltLink(altLang.lang)} className={\"flag-icon flag-icon-\" + altLang.lang.slice(-2)}></a>\n              </li>\n                \n            )}\n          </ul>\n          </nav>\n        \n        \n        );\n       \n            \n        \n \n        \n    \n\n  } else {\n      return null;\n  }\n   \n}\n  \n  \nexport default MenuLinks;"]},"metadata":{},"sourceType":"module"}